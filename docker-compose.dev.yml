version: '3.8'

services:
  # Infrastructure Services (luôn chạy)
  postgres-auth:
    image: postgres:15-alpine
    container_name: ev_postgres_auth
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5432:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-user:
    image: postgres:15-alpine
    container_name: ev_postgres_user
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5433:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-booking:
    image: postgres:15-alpine
    container_name: ev_postgres_booking
    environment:
      POSTGRES_DB: booking_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5434:5432"
    volumes:
      - postgres_booking_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-cost:
    image: postgres:15-alpine
    container_name: ev_postgres_cost
    environment:
      POSTGRES_DB: cost_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5435:5432"
    volumes:
      - postgres_cost_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-vehicle:
    image: postgres:15-alpine
    container_name: ev_postgres_vehicle
    environment:
      POSTGRES_DB: vehicle_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5436:5432"
    volumes:
      - postgres_vehicle_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-contract:
    image: postgres:15-alpine
    container_name: ev_postgres_contract
    environment:
      POSTGRES_DB: contract_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5437:5432"
    volumes:
      - postgres_contract_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-admin:
    image: postgres:15-alpine
    container_name: ev_postgres_admin
    environment:
      POSTGRES_DB: admin_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres123
    ports:
      - "5438:5432"
    volumes:
      - postgres_admin_data:/var/lib/postgresql/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongodb:
    image: mongo:7
    container_name: ev_mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - ev_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: ev_redis
    command: redis-server --requirepass redis123
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ev_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: ev_rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin123
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - ev_network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 15s
      timeout: 5s
      retries: 3

  # ========== DEVELOPMENT SERVICES WITH PROFILES ==========
  
  # API Gateway - Development
  api-gateway-dev:
    profiles: ["api-gateway"]
    build:
      context: ./backend/api-gateway
      dockerfile: Dockerfile.dev
    container_name: ev_api_gateway_dev
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      REDIS_URL: redis://:redis123@redis:6379
      AUTH_SERVICE_URL: http://auth-service-dev:3001
      USER_SERVICE_URL: http://user-service-dev:3002
      BOOKING_SERVICE_URL: http://booking-service-dev:3003
      COST_SERVICE_URL: http://cost-service-dev:3004
      VEHICLE_SERVICE_URL: http://vehicle-service-dev:3005
      CONTRACT_SERVICE_URL: http://contract-service-dev:3006
      ADMIN_SERVICE_URL: http://admin-service-dev:3007
    depends_on:
      - redis
    networks:
      - ev_network
    volumes:
      - ./backend/api-gateway/src:/app/src
      - ./backend/api-gateway/logs:/app/logs
    command: npm run dev

  # ==================== SERVICES ====================

  # Auth Service - Development
  auth-service-dev:
    profiles: ["auth"]
    build:
      context: ./backend/auth-service
      dockerfile: Dockerfile.dev
    container_name: ev_auth_service_dev
    env_file:
      - ./backend/auth-service/.env
    environment:
      NODE_ENV: development
      DB_HOST: postgres-auth       # override localhost → container name
      REDIS_HOST: redis
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "3001:3001"
    networks:
      - ev_network
    volumes:
      - ./backend/auth-service/src:/app/src
      - ./backend/auth-service/logs:/app/logs
      - ./backend/shared:/app/node_modules/@ev-coownership/shared
    command: npm run dev

  # User Service - Development
  user-service-dev:
    profiles: ["user"]
    build:
      context: ./backend/user-service
      dockerfile: Dockerfile.dev
    container_name: ev_user_service_dev
    env_file:
      - ./backend/user-service/.env
    environment:
      NODE_ENV: development
      DB_HOST: postgres-user
      REDIS_HOST: redis
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      postgres-user:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "3002:3002"
    networks:
      - ev_network
    volumes:
      - ./backend/user-service/src:/app/src
      - ./backend/user-service/logs:/app/logs
      - ./backend/shared:/app/node_modules/@ev-coownership/shared
    command: npm run dev

  # Booking Service - Development
  booking-service-dev:
    profiles: ["booking"]
    build:
      context: ./backend/booking-service
      dockerfile: Dockerfile.dev
    container_name: ev_booking_service_dev
    env_file:
      - ./backend/booking-service/.env
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      DB_HOST: postgres-booking
      DB_PORT: 5432
      DB_NAME: booking_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      REDIS_URL: redis://:redis123@redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      postgres-user:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - ev_network
    volumes:
      - ./backend/booking-service/src:/app/src
      - ./backend/booking-service/logs:/app/logs
      - ./backend/shared:/app/node_modules/@ev-coownership/shared
    command: npm run dev

  # Cost Service - Development
  cost-service-dev:
    profiles: ["cost"]
    build:
      context: ./backend/cost-service
      dockerfile: Dockerfile.dev
    container_name: ev_cost_service_dev
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      DB_HOST: postgres-cost
      DB_PORT: 5432
      DB_NAME: cost_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      REDIS_URL: redis://:redis123@redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      - postgres-cost
    networks:
      - ev_network
    volumes:
      - ./backend/cost-service/src:/app/src
      - ./backend/cost-service/logs:/app/logs
    command: npm run dev

  # Vehicle Service - Development
  vehicle-service-dev:
    profiles: ["vehicle"]
    build:
      context: ./backend/vehicle-service
      dockerfile: Dockerfile.dev
    container_name: ev_vehicle_service_dev
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      DB_HOST: postgres-vehicle
      DB_PORT: 5432
      DB_NAME: vehicle_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      REDIS_URL: redis://:redis123@redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      - postgres-vehicle
    networks:
      - ev_network
    volumes:
      - ./backend/vehicle-service/src:/app/src
      - ./backend/vehicle-service/logs:/app/logs
    command: npm run dev

  # Contract Service - Development
  contract-service-dev:
    profiles: ["contract"]
    build:
      context: ./backend/contract-service
      dockerfile: Dockerfile.dev
    container_name: ev_contract_service_dev
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      PORT: 3006
      DB_HOST: postgres-contract
      DB_PORT: 5432
      DB_NAME: contract_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      REDIS_URL: redis://:redis123@redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      - postgres-contract
    networks:
      - ev_network
    volumes:
      - ./backend/contract-service/src:/app/src
      - ./backend/contract-service/logs:/app/logs
    command: npm run dev

  # Admin Service - Development
  admin-service-dev:
    profiles: ["admin"]
    build:
      context: ./backend/admin-service
      dockerfile: Dockerfile.dev
    container_name: ev_admin_service_dev
    ports:
      - "3007:3007"
    environment:
      NODE_ENV: development
      PORT: 3007
      DB_HOST: postgres-admin
      DB_PORT: 5432
      DB_NAME: admin_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017
      REDIS_URL: redis://:redis123@redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
    depends_on:
      - postgres-admin
      - mongodb
    networks:
      - ev_network
    volumes:
      - ./backend/admin-service/src:/app/src
      - ./backend/admin-service/logs:/app/logs
    command: npm run dev

  # Notification Service - Development
  notification-service-dev:
    profiles: ["notification"]
    build:
      context: ./backend/notification-service
      dockerfile: Dockerfile.dev
    container_name: ev_notification_service_dev
    ports:
      - "3008:3008"
    environment:
      NODE_ENV: development
      PORT: 3008
      REDIS_URL: redis://:redis123@redis:6379
      RABBITMQ_URL: amqp://admin:admin123@rabbitmq:5672
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your_email@gmail.com
      SMTP_PASSWORD: your_app_password
    depends_on:
      - redis
      - rabbitmq
    networks:
      - ev_network
    volumes:
      - ./backend/notification-service/src:/app/src
      - ./backend/notification-service/logs:/app/logs
    command: npm run dev

  # Frontend - Development
  frontend-dev:
    profiles: ["frontend"]
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: ev_frontend_dev
    ports:
      - "5173:5173"
    environment:
      VITE_API_BASE_URL: http://localhost:3000/api/v1
      VITE_NODE_ENV: development
    volumes:
      - ./frontend/src:/app/src
      - ./frontend/public:/app/public
      - ./frontend/logs:/app/logs
    networks:
      - ev_network
    command: npm run dev -- --host

networks:
  ev_network:
    driver: bridge

volumes:
  postgres_auth_data:
  postgres_user_data:
  postgres_booking_data:
  postgres_cost_data:
  postgres_vehicle_data:
  postgres_contract_data:
  postgres_admin_data:
  mongodb_data:
  redis_data:
  rabbitmq_data: